name: spm-stack

volumes:
  pgdata:
    name: spm_pgdata
  redis-data:
  kafka-data:

networks:
  spm-net:
    driver: bridge
    name: spm-net

services:
  kong:
    image: kong/kong-gateway:3.9.0.1
    container_name: kong-dbless
    restart: always
    networks:
      - spm-net
    volumes:
      - ./backend/kong:/kong/declarative
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: "/kong/declarative/kong.yml"
      KONG_PROXY_ACCESS_LOG: "/dev/stdout"
      KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
      KONG_PROXY_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_GUI_URL: "http://localhost:8002"
      KONG_LICENSE_DATA: ""
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
      - "8002:8002"
      - "8445:8445"
      - "8003:8003"
      - "8004:8004"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    networks:
      - spm-net
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    networks:
      - spm-net
    ports:
      - "1010:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards

  redis:
    image: redis:7
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    ports:
      - "3069:6379" # change due 6379 being a Windows reserved port
    volumes:
      - redis-data:/data
    networks:
      - spm-net

  kafka:
    image: apache/kafka:3.8.0   # or 3.7.0
    container_name: kafka
    restart: unless-stopped
    networks: [spm-net]
    ports:
      - "9092:9092"
    environment:
      # Single-node KRaft config
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
      # Cluster format ID â€“ any stable string works for single broker
      KAFKA_CLUSTER_ID: "6nK1kC3xT8e2fQk1kP9kYA"
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "bash", "-lc", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 15

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    networks: [spm-net]
    ports: ["8085:8080"]
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy

  gotenberg:
    image: thecodingmachine/gotenberg:6
    container_name: gotenberg
    restart: unless-stopped
    networks: 
      - spm-net
    ports: ["3001:3000"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 10

  manage-account:
    build:
      context: ./backend/services/composite/manage-account
      dockerfile: dockerfile
    container_name: manage-account
    restart: unless-stopped
    networks:
      - spm-net
    ports:
      - "8090:8090"
    depends_on:
      - profile

  
  manage-notification:
    build:
      context: ./backend/services/composite/manage-notification
      dockerfile: dockerfile
    container_name: manage-notification
    restart: unless-stopped
    networks:
      - spm-net
    ports:
      - "4202:4202"
    depends_on:
      - notifications


  manage-task:
    build:
      context: ./backend/services/composite/manage-task
      dockerfile: dockerfile
    container_name: manage-task
    restart: unless-stopped
    networks:
      - spm-net
    ports:
      - "8091:8091"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - task
      - profile

  organise-project:
    build:
      context: ./backend/services/composite/organise-project
      dockerfile: dockerfile
    container_name: organise-project
    restart: unless-stopped
    networks:
      - spm-net
    ports:
      - "8092:8092"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - project

  profile:
    build:
      context: ./backend/services/atomic/profile
      dockerfile: dockerfile
    container_name: profile
    restart: unless-stopped
    networks:
      - spm-net
    env_file:
      - ./backend/services/atomic/profile/.env
    ports:
      - "3030:3030"
    environment:
      PORT: "3030"
      FE_ENDPOINT: "http://localhost:5173"

  task:
    build:
      context: ./backend/services/atomic/task
      dockerfile: dockerfile
    container_name: task
    restart: unless-stopped
    networks:
      - spm-net
    env_file:
      - ./backend/services/atomic/task/.env
    ports:
      - "3031:3031"
    environment:
      PORT: "3031"
      FE_ENDPOINT: "http://localhost:5173"

  project:
    build:
      context: ./backend/services/atomic/project
      dockerfile: dockerfile
    container_name: project
    restart: unless-stopped
    networks:
      - spm-net
    env_file:
      - ./backend/services/atomic/project/.env
    ports:
      - "3040:3040"
    environment:
      PORT: "3040"
      FE_ENDPOINT: "http://localhost:5173"  

  report:
    build:
      context: ./backend/services/atomic/report
      dockerfile: dockerfile
    container_name: report
    restart: unless-stopped
    networks:
      - spm-net
    env_file:
      - ./backend/services/atomic/report/.env
    ports:
      - "3042:3042"
    environment:
      PORT: "3042"
      FE_ENDPOINT: "http://localhost:5173"
      GOTENBERG_PATH: "http://gotenberg:3000"
      TASK_PATH: "http://task:3031"
      PROJECT_PATH: "http://project:3040"

  notifications:
    build:
      context: ./backend/services/atomic/notifications
      dockerfile: dockerfile
    container_name: notifications
    restart: unless-stopped
    networks:
      - spm-net
    env_file:
      - ./backend/services/atomic/notifications/.env
    depends_on:
      - redis
    ports:
      - "4201:4201"
    environment:
      PORT: "4201"
      FE_ENDPOINT: "http://localhost:5173"
      REDIS_URL: redis://redis:6379
